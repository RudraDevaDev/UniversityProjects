# -*- coding: utf-8 -*-
"""Data mining and warehouse.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19L3T2J8cmR9qp8D4khW-biBsAdftWGU_
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

df = pd.read_excel('/content/UCI_Real_Estate_Valuation.xlsx',sheet_name = 'Sheet1', index_col = 'No')

df.head()

df.info()

df.shape

df.describe

#EDA
g = sns.pairplot(df)
g.map_upper(plt.scatter)

df.corr()

sns.heatmap(df.corr(),annot=True,cmap='coolwarm')

plt.figure(figsize=(10,4))
sns.displot(df['Y house price of unit area'],kde=True,bins=20, aspect=2)
plt.xlabel('house price of unit area')

plt.figure(figsize=(6,6),dpi= 100)
sns.rugplot(df['Y house price of unit area'], height=0.2)

plt.figure(figsize=(6,6),dpi=100)
sns.scatterplot(data=df, y=df['Y house price of unit area'], x=df['X1 transaction date'], hue='X2 house age', palette="rocket")

plt.figure(figsize=(6,6),dpi = 100)
sns.scatterplot(data=df, y=df['Y house price of unit area'],x=df['X3 distance to the nearest MRT station'], hue ='X4 number of convenience stores',palette="rocket")

plt.figure(figsize=(6,6),dpi=100)
sns.scatterplot(data=df, y=df['Y house price of unit area'], x=df['X5 latitude'], hue= 'X6 longitude', palette="rocket")

#Trining a linear RegressionModel
X = df.drop('Y house price of unit area',axis=1)
y = df['Y house price of unit area']

df.head()

from sklearn.utils.fixes import sklearn
#Split a data into train and test
## train out model on the training set and thenuse the test set to evaluate the model
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3,random_state= 101)

X_train
#checking the Split

X_train.shape

X_test.shape

y_test.shape

#training the model
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit (X_train, y_train)

lin_reg.coef_
pd.DataFrame(lin_reg.coef_,X.columns ,columns=['Coedicients'])

print (lin_reg.coef_)

print (lin_reg.intercept_)

#Test data predictions
y_pred = lin_reg.predict(X_test)

print(X_test)

dframe = pd.DataFrame(y_test,y_pred)

dfr=pd.DataFrame({'actual':y_test,'predicted':y_pred})

print(dfr)

dfr.head(15)

#Regression Evaluation Metrics
MAE = metrics.mean_absolute_error(y_test,y_pred)
MSE = metrics.mean_squared_error(y_test,y_pred)
RMSE = np.sqrt(MSE)

pd.DataFrame([MAE,MSE,RMSE],index=['MAE','MSE','RMSE'], columns=['Metrices'])

graph=dfr.head(20)

graph.plot(kind='bar')